diff --git a/geohide.module b/geohide.module
index d6d6589..824e2e2 100644
--- a/geohide.module
+++ b/geohide.module
@@ -45,6 +45,10 @@ function geohide_menu() {
 }
 
 
+
+
+
+
 /**
  * Page callback: Geohide settings
  *
@@ -53,6 +57,21 @@ function geohide_menu() {
 
 
 function geohide_form($form, &$form_state) {
+
+	$form['title'] = array(
+	'#markup' => '<h1>Geohide</h1>'
+	);
+
+
+	$form['introduction'] = array(
+    '#markup' => '<p>Welcome to the configuration form of Geohide. The First section of this form is about the geoinfo, the location for you want to hide some kind of info, and this will be the second section to complete.</p></br>You have to select what content type, node and field you wanna hide.</p><br><hr>'
+     );
+
+   $form['first_section'] = array(
+   '#markup' => '<p><h2>This is the First Section of Geohide. Select the location for filter systems using one or some of the next fields.</h2></p>'
+    );
+
+
   $form['city'] = array(
     '#type' => 'textfield',
     '#title' => t('City to be hide'),
@@ -61,8 +80,148 @@ function geohide_form($form, &$form_state) {
     '#maxlength' => 30,
     '#description' => t('The City you want to filter a determinated info'),
     '#required' => TRUE,
+    );
+
+
+   $form['separator_one'] = array(
+   '#markup' => '<hr>'
+   );
+
+
+ $form['second_section'] = array(
+ '#markup' => '<p><h2>This is the Second Section of Geohide. Select the content for filter systems using one or some of the next fields.</h2></p>'
   );
 
+
+
+
+  /**
+  * Get all the Content types extracting only
+  * the names to show in the first dropdown select
+  */
+
+    function get_node_type_info(){
+   	 $wizard_plugins = node_type_get_types();
+   	 $opciones = array();
+   	 foreach($wizard_plugins as $key=>$wizard){
+   		 $opciones[$key] = $wizard->name;
+   	 }
+   	 return $opciones;
+    }
+    //Get the list of options to populate the first dropdown
+    //It's an idea for work with the three dynamic selects
+    //about Content types, nodes and fields
+
+    $options_first = get_node_type_info();
+
+
+ // If we have a value for the first dropdown from $form_state['values'] we use
+ // this both as the default value for the first dropdown and also as a
+ // parameter to pass to the function that retrieves the options for the second dropdown.
+
+ $value_dropdown_first = isset($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : key($options_first);
+
+ function get_user_node_by_type($node_type){
+
+ $titles = array();
+ $titles = db_query('SELECT title FROM {node} WHERE type = :type', array(':type' => $node_type))->fetchCol();
+if (count($titles) == 0) {
+ $titles = array("Sorry, but seems there aren't any node created with this Content Type", "Try to select another Content Type", "Greetings");
+ }
+ return $titles;
+ }
+
+ function get_fields_by_type($content_type){
+
+     $fields = array();
+     $fields = db_query('SELECT field_name FROM {field_config_instance} WHERE bundle = :type', array(':type' => $content_type))->fetchCol();
+    if (count($fields) == 1) {
+        // If the array only have a result, is the default field for any content type,
+        // called 'body' and then is really empty.
+     $fields = array("Sorry, but seems there aren't any field created with this Content Type", "Try to select another Content Type", "Greetings");
+     }
+     return $fields;
+     }
+
+ /**
+  * Helper function to populate the second dropdown. This work
+  * with a load of nodes directly from the value of the Content type
+  *
+  * @param key This is the selected Content Type
+  *
+  * @return array of nodes by type
+  */
+
+ function geohide_second_dropdown_options($key){
+
+ $nodesAll = get_user_node_by_type($key);
+ return $nodesAll;
+  }
+
+  function geohide_third_dropdown_options($key){
+
+ $fieldsAll = get_fields_by_type ($key);
+ return $fieldsAll;
+
+}
+  // How it displays in form the first select list using the info from dropdown
+
+  $form['dropdown_first'] = array(
+	  '#type' => 'select',
+	  '#title' => t('Select a Content Type'),
+      '#description' => t('Take a content type for use with Geohide'),
+	  '#options' => $options_first,
+	  '#default_value' => $value_dropdown_first,
+	  // Bind an ajax callback to the change event (which is the default for the
+	  // select form type) of the first dropdown. It will replace the second
+	  // dropdown when rebuilt
+	   '#ajax' => array(
+	  // When 'event' occurs, Drupal will perform an ajax request in the
+	  // background. Usually the default value is sufficient (eg. change for
+	  // select elements), but valid values include any jQuery event,
+	  // most notably are 'mousedown', 'blur', and 'submit'.
+	    'event' => 'change',
+	    'callback' => 'geohide_ajax_callback',
+        'wrapper' => array('dropdown_second_replace', 'dropdown_thrid_replace'),
+        //'wrapper' => 'dropdown_second_replace',
+	      ),
+	   );
+
+
+   $form['dropdown_second'] = array(
+      '#type' => 'select',
+      '#title' => t('Select all the nodes what you need'),
+      '#description' => t('Here you can select all the nodes whose fields you want to hide'),
+      // Allow multiple selection of nodes
+      '#multiple' => TRUE,
+      // The entire enclosing div created here gets replaced when dropdown_first
+      // is changed.
+     '#prefix' => '<div id="dropdown_second_replace">',
+     '#suffix' => '</div>',
+     // when the form is rebuilt during ajax processing, the $value_dropdown_first variable
+     // will now have the new value and so the options will change
+     '#options' => geohide_second_dropdown_options($value_dropdown_first),
+     '#default_value' => isset($form_state['values']['dropdown_second']) ? $form_state['values']['dropdown_second'] : '',
+    );
+
+    $form['dropdown_third'] = array(
+       '#type' => 'select',
+       '#title' => t('Select the fields from the selected Content Type'),
+       '#description' => t('And now, check all the fields to hide'),
+       // Allow multiple selection of fields
+       '#multiple' => TRUE,
+       // The entire enclosing div created here gets replaced when dropdown_first
+       // is changed.
+      '#prefix' => '<div id="dropdown_third_replace">',
+      '#suffix' => '</div>',
+      // when the form is rebuilt during ajax processing, the $value_dropdown_first variable
+      // will now have the new value and so the options will change
+      '#options' => geohide_third_dropdown_options($value_dropdown_first),
+      '#default_value' => isset($form_state['values']['dropdown_third']) ? $form_state['values']['dropdown_third'] : '',
+
+     );
+
+
   $form['nodetitle'] = array(
     '#type' => 'textfield',
     '#title' => t('Node to be hide'),
@@ -78,6 +237,28 @@ function geohide_form($form, &$form_state) {
 }
 
 
+
+
+  /**
+   *  Selects just the second dropdown and the third dropdown to be returned for re-rendering
+   *  Since the controlling logic for populating the form is in the form builder
+   * function, all we do here is select the element and return it to be updated.
+   * @return renderable array (the second dropdown)
+   */
+
+
+function geohide_ajax_callback($form, $form_state) {
+    return array(
+    '#type' => 'ajax',
+    '#commands' => array(
+      ajax_command_replace("#dropdown_second_replace", render($form['dropdown_second'])),
+      ajax_command_replace("#dropdown_third_replace", render($form['dropdown_third']))
+          )
+  );
+    
+}
+
+
 function geohide_submit($form, $form_state){
 	$values = array(
 		'city' => $form_state['values']['city'],
@@ -127,4 +308,3 @@ function geohide_node_view($node, $view_mode) {
          return $node;
     }
 }
-
